<?php

use Drupal\Core\Render\Markup;

/**
 * Implements hook_render_template().
 *
 * Renders a Twig template.
 *
 * @param string $template_file
 *   The file name of the template to render.
 * @param array $variables
 *   A keyed array of variables that will appear in the output.
 *
 * @return string|\Drupal\Component\Render\MarkupInterface
 *   The output generated by the template.
 */
function quick_node_clone_render_template($template_file, array $variables) {
  /** @var \Twig_Environment $twig_service */
  //We have defined our own TwigEnvironment and TwigExtension in order to
  //render using our QuickNodeCloneRenderer. This allows us to use nonstandard
  //render arrays without throwing PHP user errors.
  $twig_service = \Drupal::service('quick_node_clone.twig');
  $output = [
    'debug_prefix' => '',
    'debug_info' => '',
    'rendered_markup' => '',
    'debug_suffix' => '',
  ];
  try {
    $output['rendered_markup'] = $twig_service->loadTemplate($template_file)->render($variables);
  }
  catch (\Twig_Error_Loader $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
  catch (\Twig_Error_Runtime $e) {
    // In case there is a previous exception, re-throw the previous exception,
    // so that the original exception is shown, rather than
    // \Twig_Template::displayWithErrorHandling()'s exception.
    $previous_exception = $e->getPrevious();
    if ($previous_exception) {
      throw $previous_exception;
    }
    throw $e;
  }
  // This output has already been rendered and is therefore considered safe.
  return Markup::create(implode('', $output));
}

/**
 * Implements hook_entity_type_build().
 */
function quick_node_clone_entity_type_build(array &$entity_types) {
  if(isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('quick_node_clone', 'Drupal\quick_node_clone\Form\QuickNodeCloneNodeForm');
  }

}
